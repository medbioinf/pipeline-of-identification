nextflow.enable.dsl=2

params.convert_psm_tsv_mem = "60 GB"
params.enhance_psm_tsv_mem = "8 GB"

/**
 * Executes postprocessing steps to enhance the psm_utils TSV and prepare the PIN files
 *
 * @return tuples containing the enhanced psm_utils TSVs and the corresponding PIN files
 */
workflow convert_and_enhance_psm_tsv {
    take:
    searchengine_results
    type
    searchengine

    main:
    psm_utils_tsvs = convert_searchengine_to_psm_utils(searchengine_results, type)
    enhanced_and_pins = enhance_psm_tsv(psm_utils_tsvs, searchengine)
    
    emit:
    psm_tsv = enhanced_and_pins.psm_tsv
    pin_file = enhanced_and_pins.pin_file
    onlybest_pin_file = enhanced_and_pins.onlybest_pin_file
}


/**
 * Executes postprocessing steps to enhance the psm_utils TSV and prepare the PIN files
 *
 * @return tuples containing the enhanced psm_utils TSVs and the corresponding PIN files
 */
workflow enhance_psm_tsv {
    take:
    psm_utils_tsvs
    searchengine

    main:
    enhance_psms_and_create_pin = enhance_psms_and_create_pin(psm_utils_tsvs, searchengine)
    onlybest_pin_file = filter_pin_keep_only_best(enhance_psms_and_create_pin.pin_file, searchengine)

    emit:
    psm_tsv = enhance_psms_and_create_pin.psm_tsv
    pin_file = enhance_psms_and_create_pin.pin_file
    onlybest_pin_file
}

/**
 * Converts the searchengine output to a psm_utils TSV files
 */
process convert_searchengine_to_psm_utils {
    cpus 2
    memory { params.convert_psm_tsv_mem }
    container { params.python_image }

    input:
    path searchengine_results
    val type

    output:
    path "*.psm_utils.tsv"

    script:
    """
    convert_to_psm_utils.py -in_file ${searchengine_results} -out_file ${searchengine_results}.psm_utils.tsv -in_type ${type}
    """ 
}

process convert_chunked_result_to_psm_utils {
    cpus 2
    memory { params.convert_psm_tsv_mem }
    container { params.python_image }

    input:
    tuple val(original_mzml_basename), path(searchengine_results)
    val type

    output:
    tuple val(original_mzml_basename), path("${searchengine_results}.psm_utils.tsv")

    script:
    """
    convert_to_psm_utils.py -in_file ${searchengine_results} -out_file ${searchengine_results}.psm_utils.tsv -in_type ${type}
    """ 
}

/**
 * Performs some adjustments and enhances the psm_utils TSV and creates the PIN file (for Percolator)
 *
 * @param psm_utils_tsv TSV file generated by psm_utils.convert()
 * @param searchengine Search engine used for the identification
 * @return enhanced TSV file (psm_tsv) and PIN file (pin_file)
 */
process enhance_psms_and_create_pin {
    cpus 2
    memory { params.enhance_psm_tsv_mem }
    container { params.python_image }

    input:
    path psm_utils_tsv
    val searchengine

    output:
    path "${psm_utils_tsv.baseName}.enhanced.tsv", emit: psm_tsv
    path "${psm_utils_tsv.baseName}.pin", emit: pin_file

    script:
    """
    adjust_psm_list.py -in_file ${psm_utils_tsv} -out_file ${psm_utils_tsv.baseName}.adjusted.tsv -searchengine ${searchengine}
    psms_to_pin_and_enhancedTSV.py -in_file ${psm_utils_tsv.baseName}.adjusted.tsv -out_file ${psm_utils_tsv.baseName}.enhanced.tsv -out_pin  ${psm_utils_tsv.baseName}.pre.pin -searchengine ${searchengine}

    # correct the PIN file by moving the scan number to third column and adding correct SpecId (increasing integer)
    awk '{FS="\t";OFS="\t"; if (NR>1) { \$3=\$1; \$1=NR-1; gsub(".*=", "", \$3) } print}' ${psm_utils_tsv.baseName}.pre.pin > ${psm_utils_tsv.baseName}.pin
    """
}


process filter_pin_keep_only_best {
    cpus 2
    memory { params.enhance_psm_tsv_mem }
    container { params.python_image }

    input:
    path pin_files
    val searchengine

    output:
    path "${pin_files.baseName}.onlybest.pin"

    script:
    """
    filter_pin_keep_best_per_spectrum.py -in_file ${pin_files} -out_pin ${pin_files.baseName}.onlybest.pin -searchengine ${searchengine}
    """
}
