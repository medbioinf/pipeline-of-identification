nextflow.enable.dsl=2

python_image = 'medbioinf/ident-comparison-python'

/**
 * Executes postprocessing steps to enhance the psm_utils TSV and prepare the PIN files
 *
 * @return tuples containing the enhanced psm_utils TSVs and the corresponding PIN files
 */
workflow convert_and_enhance_psm_tsv {
    take:
        searchengine_results
        type
        searchengine

    main:
        psm_utils_tsvs = convert_searchengine_to_psm_utils(searchengine_results, type)
        enhance_psms_and_create_pin = enhance_psms_and_create_pin(psm_utils_tsvs, searchengine)

    emit:
        enhance_psms_and_create_pin.psm_tsv
        enhance_psms_and_create_pin.pin_file
}

/**
 * Converts the searchengine output to a psm_utils TSV files
 */
process convert_searchengine_to_psm_utils {
    cpus 2
    memory '24GB'

    container { python_image }

    input:
    path searchengine_results
    val type


    output:
    path "*.psm_utils.tsv"

    """
    convert_to_psm_utils.py -in_file ${searchengine_results} -out_file ${searchengine_results}.psm_utils.tsv -in_type ${type}
    """ 
}

/**
 * Performs some adjustments and enhances the psm_utils TSV and creates the PIN file (for Percolator)
 *
 * @param psm_utils_tsv TSV file generated by psm_utils.convert()
 * @param searchengine Search engine used for the identification
 * @return enhanced TSV file (psm_tsv) and PIN file (pin_file)
 */
process enhance_psms_and_create_pin {
    cpus 2
    memory '8GB'

    container { python_image }

    input:
    path psm_utils_tsv
    val searchengine

    output:
    path "*.enhanced.tsv", emit: psm_tsv
    path "*.pin", emit: pin_file

    """
    adjust_psm_list.py -in_file ${psm_utils_tsv} -out_file ${psm_utils_tsv.baseName}.adjusted.tsv -searchengine ${searchengine}
    psms_to_pin_and_enhancedTSV.py -in_file ${psm_utils_tsv.baseName}.adjusted.tsv -out_file ${psm_utils_tsv.baseName}.enhanced.tsv -out_pin  ${psm_utils_tsv.baseName}.pin -searchengine ${searchengine}
    """
}
